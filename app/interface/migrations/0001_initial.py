# Generated by Django 5.2.5 on 2025-08-12 17:52

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django_lifecycle.mixins
import interface.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('context', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('content', models.TextField(blank=True, help_text='Description text', null=True)),
                ('entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(('app_label', 'interface'), ('app_label', 'sensorthings'), ('app_label', 'waterquality'), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Geometry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('context', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('content', models.JSONField(blank=True, help_text='GeoJSON format', null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('points', django.contrib.gis.db.models.fields.MultiPointField(blank=True, null=True, srid=4326)),
                ('line', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('lines', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, null=True, srid=4326)),
                ('polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('polygons', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('collection', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
                ('entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(models.Q(('app_label', 'sensorthings'), ('model', 'feature')), models.Q(('app_label', 'sensorthings'), ('model', 'location')), models.Q(('app_label', 'waterquality'), ('model', 'waterbody')), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'geometries',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('context', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('content', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('key', models.TextField(blank=True, null=True)),
                ('entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(('app_label', 'sensorthings'), ('app_label', 'waterquality'), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PredicateRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('ontology', models.CharField(choices=[('CUSTOM', 'CUSTOM'), ('DC', 'DC'), ('FOAF', 'FOAF'), ('SOSA', 'SOSA'), ('RDF', 'RDF'), ('RDFS', 'RDFS')])),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('predicate', models.CharField(blank=True, max_length=256, null=True)),
                ('subject_instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('object_instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('context', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('descriptions', models.ManyToManyField(blank=True, to='interface.description')),
                ('object_entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(('app_label', 'sensorthings'), ('app_label', 'interface'), ('app_label', 'waterquality'), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='object_model', to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('subject_entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(('app_label', 'sensorthings'), ('app_label', 'interface'), ('app_label', 'waterquality'), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='subject_model', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('instance', models.PositiveBigIntegerField(blank=True, help_text='instance id', null=True)),
                ('context', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('content', models.JSONField(blank=True, help_text='JSON format', null=True)),
                ('key', models.TextField(blank=True, null=True)),
                ('entity', models.ForeignKey(blank=True, help_text='Model name', limit_choices_to=models.Q(('app_label', 'sensorthings')), null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'properties',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Visualization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('sorting', models.FloatField(default=0.0)),
                ('domain', models.CharField(blank=True, max_length=300, null=True)),
                ('namespace', models.CharField(blank=True, max_length=300, null=True)),
                ('label', models.CharField(blank=True, max_length=300, null=True)),
                ('tag', models.CharField(blank=True, max_length=300, null=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('is_vue_app', models.BooleanField()),
                ('is_raw', models.BooleanField()),
                ('is_raw_template', models.BooleanField()),
                ('render_string', models.JSONField(blank=True, help_text='array of keys ["vueApp","template"] will be rendered from string not from template path', null=True)),
                ('include', models.JSONField(blank=True, help_text='array of keys ["vueApp","template"] will be included', null=True)),
                ('exclude', models.JSONField(blank=True, help_text='array of keys ["vueApp","template"] will be excluded', null=True)),
                ('context', models.JSONField(blank=True, null=True)),
                ('template', models.CharField(blank=True, choices=[('ui/app/templates/basic.html', 'ui/app/templates/basic.html'), ('ui/app/templates/vue.html', 'ui/app/templates/vue.html')], help_text='template path of e.g. index.html that will be loaded first', max_length=2000, null=True)),
                ('layout', models.CharField(blank=True, choices=[('ui/app/layouts/base.html', 'ui/app/layouts/base.html')], help_text='template path of e.g. base.html', max_length=2000, null=True)),
                ('navbar', models.CharField(blank=True, choices=[('ui/app/navbars/vuenavbar.html', 'ui/app/navbars/vuenavbar.html'), ('ui/app/navbars/navbar.html', 'ui/app/navbars/navbar.html')], help_text="template path or string if 'render_sting' includes key 'navbar'", max_length=2000, null=True)),
                ('header', models.CharField(blank=True, choices=[('ui/app/headers/header.html', 'ui/app/headers/header.html')], help_text="template path or string if 'render_sting' includes key 'header'", max_length=2000, null=True)),
                ('view', models.CharField(blank=True, choices=[('ui/app/views/Landingpage.html', 'ui/app/views/Landingpage.html')], help_text="template path or string if 'render_sting' includes key 'view'", max_length=2000, null=True)),
                ('footer', models.CharField(blank=True, choices=[('ui/app/footers/footer.html', 'ui/app/footers/footer.html')], help_text="template path or string if 'render_sting' includes key 'footer'", max_length=2000, null=True)),
                ('vueApp', models.CharField(blank=True, choices=[('ui/app/vue/app.js', 'ui/app/vue/app.js')], help_text="template path or string if 'render_sting' includes key 'vueApp'", max_length=2000, null=True)),
                ('vueData', models.CharField(blank=True, choices=[('ui/app/data/user.js.vue', 'ui/app/data/user.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueData'", max_length=2000, null=True)),
                ('vueComputed', models.CharField(blank=True, choices=[('ui/app/computed/computed.js.vue', 'ui/app/computed/computed.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueComputed'", max_length=2000, null=True)),
                ('vueMounted', models.CharField(blank=True, choices=[('ui/app/mounted/mounted.js.vue', 'ui/app/mounted/mounted.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueMounted'", max_length=2000, null=True)),
                ('vueCreated', models.CharField(blank=True, choices=[('ui/app/created/created.js.vue', 'ui/app/created/created.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueCreated'", max_length=2000, null=True)),
                ('vueMethods', models.CharField(blank=True, choices=[('ui/app/methods/methods.js,vue', 'ui/app/methods/methods.js,vue')], help_text="template path or string if 'render_sting' includes key 'vueMethods'", max_length=2000, null=True)),
                ('vueTop', models.CharField(blank=True, choices=[('ui/app/top/dexie.js.vue', 'ui/app/top/dexie.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueTop'", max_length=2000, null=True)),
                ('vueBottom', models.CharField(blank=True, choices=[('ui/app/bottom/debug.js.vue', 'ui/app/bottom/debug.js.vue')], help_text="template path or string if 'render_sting' includes key 'vueBottom'", max_length=2000, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sorting'],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encoding', models.CharField(blank=True, default='utf-8', max_length=100, null=True)),
                ('delimiter', models.CharField(blank=True, default=',', max_length=3, null=True)),
                ('folder', models.TextField(blank=True, default='upload', help_text='you can set subfolders like : x or x/y/z', null=True)),
                ('label', models.CharField(blank=True, max_length=2000, null=True)),
                ('tag', models.CharField(blank=True, max_length=2000, null=True)),
                ('filename', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default='default', max_length=256, null=True)),
                ('link', models.TextField(blank=True, null=True)),
                ('upload', models.FileField(upload_to=interface.models.file_upload, verbose_name='Object Upload')),
                ('base64', models.TextField(blank=True, null=True)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('owner', 'filename', 'tag')},
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
